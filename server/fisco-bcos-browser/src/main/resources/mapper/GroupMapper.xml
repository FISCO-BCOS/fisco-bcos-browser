<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.bcos.browser.mapper.GroupMapper">
    <update id="createTbGroup">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            group_id int(11) NOT NULL COMMENT '群组ID',
            group_name varchar(128) NOT NULL COMMENT '群组名称',
            group_desc varchar(1024) COMMENT '群组描述',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (group_id)
        ) COMMENT='群组信息表' ENGINE=InnoDB CHARSET=utf8
    </update>
    
    <update id="createTbNode">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            node_id varchar(192) NOT NULL COMMENT '节点ID',
            group_id int(11) NOT NULL COMMENT '所属群组id',
            ip varchar(16) COMMENT '节点ip',
            rpc_port varchar(16) COMMENT '节点rpc端口',
            p2p_port varchar(16) COMMENT '节点p2p端口',
            block_number int(11) DEFAULT 0 COMMENT '节点块高',
            pbft_view int(11) DEFAULT 0 COMMENT 'PBFT view',
            status tinyint(4) DEFAULT '0' COMMENT '节点状态（0：正常，1：异常）',
            type tinyint(4) DEFAULT '0' COMMENT '节点类型（0：手动添加，1：链上同步）',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (node_id),
            KEY (group_id)
        ) COMMENT='节点信息表' ENGINE=InnoDB DEFAULT CHARSET=utf8
    </update>
    
    <update id="createTbBlockChainInfo">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            group_id int(11) NOT NULL COMMENT '所属群组ID',
            latest_number int(11) COMMENT '最新块高',
            txn int(11) COMMENT '交易量',
            pending_txn int(11) COMMENT '正在处理但还未上链的交易个数',
            pbft_view int(11) COMMENT 'PBFT VIEW',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (group_id)
        ) COMMENT='区块链全局信息表' ENGINE=InnoDB DEFAULT CHARSET=utf8
    </update>
    
    <update id="createTbTxnByDay">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            pk_date date NOT NULL COMMENT '时间',
            group_id int(11) NOT NULL COMMENT '所属群组ID',
            txn int(11) COMMENT '交易量',
            block_number int(11) DEFAULT '0' COMMENT '当前统计到的块高',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (pk_date)
        ) COMMENT='每日交易量记录表' ENGINE=InnoDB DEFAULT CHARSET=utf8
    </update>
    
    <update id="createTbBlock">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            block_hash varchar(128) NOT NULL COMMENT '块hash值',
            group_id int(11) NOT NULL COMMENT '所属群组ID',
            number int(11) NOT NULL COMMENT '块高',
            sealer varchar(256) NOT NULL COMMENT '出块者',
            block_time timestamp(3) NOT NULL COMMENT '出块时间',
            txn int(11) COMMENT '块包含的交易数',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (block_hash),
            KEY (group_id),
            KEY (number)
        ) COMMENT='区块信息表' ENGINE=InnoDB DEFAULT CHARSET=utf8
    </update>
    
    <update id="createTbTransaction">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            trans_hash varchar(128) NOT NULL COMMENT '交易hash值',
            group_id int(11) NOT NULL COMMENT '所属群组ID',
            block_hash varchar(128) COMMENT '块hash值',
            block_number int(11) COMMENT '块高',
            block_time timestamp(3) COMMENT '出块时间',
            block_date date NOT NULL COMMENT '出块年月日',
            trans_from varchar(128) COMMENT '发送者',
            trans_to varchar(128) COMMENT '接收者',
            trans_index int(11) COMMENT '交易索引',
            method varchar(128) COMMENT '调用方法',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (trans_hash),
            UNIQUE KEY idx_bt (block_number,trans_index),
            KEY idx_bg (block_date,group_id),
            KEY idx_gi (group_id)
        ) COMMENT='交易信息表' ENGINE=InnoDB DEFAULT CHARSET=utf8
    </update>
    
    <update id="createTbContract">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            contract_id int(11) NOT NULL AUTO_INCREMENT COMMENT '合约编号',
            contract_name varchar(128) COMMENT '合约名称',
            contract_source text COMMENT '合约源码',
            contract_status tinyint(4) DEFAULT '0' COMMENT '编译（0：未编译，1：编译成功，2：编译失败）',
            contract_abi text COMMENT '编译合约生成的abi文件内容',
            contract_bin text COMMENT '合约binary',
            contract_path varchar(128) COMMENT '合约相对路径',
            contract_address varchar(128) COMMENT '合约地址',
            contract_desc text COMMENT '描述',
            error_info text COMMENT '编译错误信息',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (contract_id),
            UNIQUE KEY (contract_name, contract_path)
        ) ENGINE=InnoDB AUTO_INCREMENT=300001 DEFAULT CHARSET=utf8 COMMENT='合约信息表'
    </update>
    
    <update id="createTbFunction">
        CREATE TABLE IF NOT EXISTS ${tableName} (
            method_id varchar(128) COMMENT '方法id',
            abi_info text COMMENT 'abi信息',
            type varchar(32) COMMENT '方法类型',
            gmt_create datetime COMMENT '创建时间',
            gmt_modify datetime COMMENT '修改时间',
            PRIMARY KEY (method_id)
        ) COMMENT='方法解析信息表' ENGINE=InnoDB DEFAULT CHARSET=utf8
    </update>

    <update id="dropTableByName">
        DROP TABLE IF EXISTS ${tableName}
    </update>

    <insert id="addGroup" parameterType="org.bcos.browser.entity.dto.Group">
        INSERT INTO tb_group(
            group_id,
            group_name,
            group_desc,
            gmt_create,
            gmt_modify
        ) VALUES (
            #{groupId},
            #{groupName},
            #{groupDesc},
            now(),
            now()
        )
    </insert>

    <select id="getGroupList" resultType="org.bcos.browser.entity.dto.Group">
        SELECT group_id as groupId,
            group_name as groupName,
            group_desc as groupDesc
        FROM tb_group
    </select>
    
    <select id="getGroupById" resultType="org.bcos.browser.entity.dto.Group">
        SELECT group_id as groupId,
            group_name as groupName,
            group_desc as groupDesc
        FROM tb_group 
        WHERE group_id=#{groupId}
    </select>
    
    <delete id="deleteGroup">
        DELETE FROM tb_group WHERE group_id=#{groupId}
    </delete>

</mapper>